{"version":3,"sources":["../node_modules/strip-comments/lib/compile.js","../node_modules/strip-comments/lib/Node.js","../node_modules/strip-comments/lib/languages.js","../node_modules/strip-comments/lib/parse.js","../node_modules/strip-comments/index.js","examples.json","index.js"],"names":["compile","cst","options","keepProtected","safe","firstSeen","walk","node","parent","output","lines","nodes","child","type","first","preserveNewlines","split","repeat","length","protected","value","module","exports","Node","match","newline","Boolean","Block","push","ada","LINE_REGEX","apl","applescript","BLOCK_OPEN_REGEX","BLOCK_CLOSE_REGEX","csharp","haskell","html","BLOCK_CLOSE_LOOSE_REGEX","BLOCK_CLOSE_STRICT_NEWLINE_REGEX","BLOCK_CLOSE_STRICT_LOOSE_REGEX","javascript","lua","matlab","perl","php","python","ruby","shebang","hashbang","c","css","java","js","less","pascal","ocaml","sass","sql","swift","ts","typscript","xml","require","languages","constants","ESCAPED_CHAR_REGEX","QUOTED_STRING_REGEX","NEWLINE_REGEX","parse","input","TypeError","stack","name","language","toLowerCase","lang","Error","token","prev","block","remaining","tripleQuotes","filter","every","regex","source","consume","slice","scan","exec","pop","SyntaxError","test","startsWith","line","strip","opts","pattern","grid","square","sierpinski","waves","diagonals","frame","drop","rotation","wipe","disco","count","size","spacing","width","document","getElementById","editor","comment","context","getContext","dpr","window","devicePixelRatio","callback","startTime","code","fetchGist","gist","fetch","then","response","ok","json","Promise","reject","extractFile","files","keys","key","Object","endsWith","file","extractCode","truncated","content","map","trim","join","submitCode","updateCallback","catch","error","console","log","updateComments","readURL","url","URL","location","searchParams","has","get","set","history","replaceState","checkLength","classList","add","remove","Function","render","time","Date","height","scale","index","y","x","Number","offset","color","radius","beginPath","fillStyle","arc","Math","PI","fill","requestAnimationFrame","comments","querySelectorAll","innerHTML","updateCommentsForCode","snippets","values","examples","newComment","indexOf","nextExample","newCode","style","addEventListener","event","preventDefault","onpopstate"],"mappings":"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","file":"src.d2066c2d.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst compile = (cst, options = {}) => {\n  const keepProtected = options.safe === true || options.keepProtected === true;\n  let firstSeen = false;\n\n  const walk = (node, parent) => {\n    let output = '';\n    let inner;\n    let lines;\n\n    for (const child of node.nodes) {\n      switch (child.type) {\n        case 'block':\n          if (options.first && firstSeen === true) {\n            output += walk(child, node);\n            break;\n          }\n\n          if (options.preserveNewlines === true) {\n            inner = walk(child, node);\n            lines = inner.split('\\n');\n            output += '\\n'.repeat(lines.length - 1);\n            break;\n          }\n\n          if (keepProtected === true && child.protected === true) {\n            output += walk(child, node);\n            break;\n          }\n\n          firstSeen = true;\n          break;\n        case 'line':\n          if (options.first && firstSeen === true) {\n            output += child.value;\n            break;\n          }\n\n          if (keepProtected === true && child.protected === true) {\n            output += child.value;\n          }\n\n          firstSeen = true;\n          break;\n        case 'open':\n        case 'close':\n        case 'text':\n        case 'newline':\n        default: {\n          output += child.value || '';\n          break;\n        }\n      }\n    }\n\n    return output;\n  };\n\n  return walk(cst);\n};\n\nmodule.exports = compile;\n","'use strict';\n\nclass Node {\n  constructor(node) {\n    this.type = node.type;\n    if (node.value) this.value = node.value;\n    if (node.match) this.match = node.match;\n    this.newline = node.newline || '';\n  }\n  get protected() {\n    return Boolean(this.match) && this.match[1] === '!';\n  }\n}\n\nclass Block extends Node {\n  constructor(node) {\n    super(node);\n    this.nodes = node.nodes || [];\n  }\n  push(node) {\n    this.nodes.push(node);\n  }\n  get protected() {\n    return this.nodes.length > 0 && this.nodes[0].protected === true;\n  }\n}\n\nmodule.exports = { Node, Block };\n","'use strict';\n\nexports.ada = { LINE_REGEX: /^--.*/ };\nexports.apl = { LINE_REGEX: /^⍝.*/ };\n\nexports.applescript = {\n  BLOCK_OPEN_REGEX: /^\\(\\*/,\n  BLOCK_CLOSE_REGEX: /^\\*\\)/\n};\n\nexports.csharp = {\n  LINE_REGEX: /^\\/\\/.*/\n};\n\nexports.haskell = {\n  BLOCK_OPEN_REGEX: /^\\{-/,\n  BLOCK_CLOSE_REGEX: /^-\\}/,\n  LINE_REGEX: /^--.*/\n};\n\nexports.html = {\n  BLOCK_OPEN_REGEX: /^\\n*<!--(?!-?>)/,\n  BLOCK_CLOSE_REGEX: /^(?<!(?:<!-))-->/,\n  BLOCK_CLOSE_LOOSE_REGEX: /^(?<!(?:<!-))--\\s*>/,\n  BLOCK_CLOSE_STRICT_NEWLINE_REGEX: /^(?<!(?:<!-))-->(\\s*\\n+|\\n*)/,\n  BLOCK_CLOSE_STRICT_LOOSE_REGEX: /^(?<!(?:<!-))--\\s*>(\\s*\\n+|\\n*)/\n};\n\nexports.javascript = {\n  BLOCK_OPEN_REGEX: /^\\/\\*\\*?(!?)/,\n  BLOCK_CLOSE_REGEX: /^\\*\\/(\\n?)/,\n  LINE_REGEX: /^\\/\\/(!?).*/\n};\n\nexports.lua = {\n  BLOCK_OPEN_REGEX: /^--\\[\\[/,\n  BLOCK_CLOSE_REGEX: /^\\]\\]/,\n  LINE_REGEX: /^--.*/\n};\n\nexports.matlab = {\n  BLOCK_OPEN_REGEX: /^%{/,\n  BLOCK_CLOSE_REGEX: /^%}/,\n  LINE_REGEX: /^%.*/\n};\n\nexports.perl = {\n  LINE_REGEX: /^#.*/\n};\n\nexports.php = {\n  ...exports.javascript,\n  LINE_REGEX: /^(#|\\/\\/).*?(?=\\?>|\\n)/\n};\n\nexports.python = {\n  BLOCK_OPEN_REGEX: /^\"\"\"/,\n  BLOCK_CLOSE_REGEX: /^\"\"\"/,\n  LINE_REGEX: /^#.*/\n};\n\nexports.ruby = {\n  BLOCK_OPEN_REGEX: /^=begin/,\n  BLOCK_CLOSE_REGEX: /^=end/,\n  LINE_REGEX: /^#.*/\n};\n\nexports.shebang = exports.hashbang = {\n  LINE_REGEX: /^#!.*/\n};\n\nexports.c = exports.javascript;\nexports.csharp = exports.javascript;\nexports.css = exports.javascript;\nexports.java = exports.javascript;\nexports.js = exports.javascript;\nexports.less = exports.javascript;\nexports.pascal = exports.applescript;\nexports.ocaml = exports.applescript;\nexports.sass = exports.javascript;\nexports.sql = exports.ada;\nexports.swift = exports.javascript;\nexports.ts = exports.javascript;\nexports.typscript = exports.javascript;\nexports.xml = exports.html;\n","'use strict';\n\nconst { Node, Block } = require('./Node');\nconst languages = require('./languages');\n\nconst constants = {\n  ESCAPED_CHAR_REGEX: /^\\\\./,\n  QUOTED_STRING_REGEX: /^(['\"`])((?:\\\\.|[^\\1])+?)(\\1)/,\n  NEWLINE_REGEX: /^\\r*\\n/\n};\n\nconst parse = (input, options = {}) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected input to be a string');\n  }\n\n  const cst = new Block({ type: 'root', nodes: [] });\n  const stack = [cst];\n  const name = (options.language || 'javascript').toLowerCase();\n  const lang = languages[name];\n\n  if (typeof lang === 'undefined') {\n    throw new Error(`Language \"${name}\" is not supported by strip-comments`);\n  }\n\n  const { LINE_REGEX, BLOCK_OPEN_REGEX, BLOCK_CLOSE_REGEX } = lang;\n  let block = cst;\n  let remaining = input;\n  let token;\n  let prev;\n\n  const source = [BLOCK_OPEN_REGEX, BLOCK_CLOSE_REGEX].filter(Boolean);\n  let tripleQuotes = false;\n\n  if (source.every(regex => regex.source === '^\"\"\"')) {\n    tripleQuotes = true;\n  }\n\n  /**\n   * Helpers\n   */\n\n  const consume = (value = remaining[0] || '') => {\n    remaining = remaining.slice(value.length);\n    return value;\n  };\n\n  const scan = (regex, type = 'text') => {\n    const match = regex.exec(remaining);\n    if (match) {\n      consume(match[0]);\n      return { type, value: match[0], match };\n    }\n  };\n\n  const push = node => {\n    if (prev && prev.type === 'text' && node.type === 'text') {\n      prev.value += node.value;\n      return;\n    }\n    block.push(node);\n    if (node.nodes) {\n      stack.push(node);\n      block = node;\n    }\n    prev = node;\n  };\n\n  const pop = () => {\n    if (block.type === 'root') {\n      throw new SyntaxError('Unclosed block comment');\n    }\n    stack.pop();\n    block = stack[stack.length - 1];\n  };\n\n  /**\n   * Parse input string\n   */\n\n  while (remaining !== '') {\n    // escaped characters\n    if ((token = scan(constants.ESCAPED_CHAR_REGEX, 'text'))) {\n      push(new Node(token));\n      continue;\n    }\n\n    // quoted strings\n    if (block.type !== 'block' && (!prev || !/\\w$/.test(prev.value)) && !(tripleQuotes && remaining.startsWith('\"\"\"'))) {\n      if ((token = scan(constants.QUOTED_STRING_REGEX, 'text'))) {\n        push(new Node(token));\n        continue;\n      }\n    }\n\n    // newlines\n    if ((token = scan(constants.NEWLINE_REGEX, 'newline'))) {\n      push(new Node(token));\n      continue;\n    }\n\n    // block comment open\n    if (BLOCK_OPEN_REGEX && options.block && !(tripleQuotes && block.type === 'block')) {\n      if ((token = scan(BLOCK_OPEN_REGEX, 'open'))) {\n        push(new Block({ type: 'block' }));\n        push(new Node(token));\n        continue;\n      }\n    }\n\n    // block comment close\n    if (BLOCK_CLOSE_REGEX && block.type === 'block' && options.block) {\n      if ((token = scan(BLOCK_CLOSE_REGEX, 'close'))) {\n        token.newline = token.match[1] || '';\n        push(new Node(token));\n        pop();\n        continue;\n      }\n    }\n\n    // line comment\n    if (LINE_REGEX && block.type !== 'block' && options.line) {\n      if ((token = scan(LINE_REGEX, 'line'))) {\n        push(new Node(token));\n        continue;\n      }\n    }\n\n    // Plain text (skip \"C\" since some languages use \"C\" to start comments)\n    if ((token = scan(/^[a-zABD-Z0-9\\t ]+/, 'text'))) {\n      push(new Node(token));\n      continue;\n    }\n\n    push(new Node({ type: 'text', value: consume(remaining[0]) }));\n  }\n\n  return cst;\n};\n\nmodule.exports = parse;\n","/*!\n * strip-comments <https://github.com/jonschlinkert/strip-comments>\n * Copyright (c) 2014-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nconst compile = require('./lib/compile');\nconst parse = require('./lib/parse');\n\n/**\n * Strip all code comments from the given `input`, including protected\n * comments that start with `!`, unless disabled by setting `options.keepProtected`\n * to true.\n *\n * ```js\n * const str = strip('const foo = \"bar\";// this is a comment\\n /* me too *\\/');\n * console.log(str);\n * // => 'const foo = \"bar\";'\n * ```\n * @name  strip\n * @param  {String} `input` string from which to strip comments\n * @param  {Object} `options` optional options, passed to [extract-comments][extract-comments]\n * @option {Boolean} [options] `line` if `false` strip only block comments, default `true`\n * @option {Boolean} [options] `block` if `false` strip only line comments, default `true`\n * @option {Boolean} [options] `keepProtected` Keep ignored comments (e.g. `/*!` and `//!`)\n * @option {Boolean} [options] `preserveNewlines` Preserve newlines after comments are stripped\n * @return {String} modified input\n * @api public\n */\n\nconst strip = module.exports = (input, options) => {\n  const opts = { ...options, block: true, line: true };\n  return compile(parse(input, opts), opts);\n};\n\n/**\n * Strip only block comments.\n *\n * ```js\n * const strip = require('..');\n * const str = strip.block('const foo = \"bar\";// this is a comment\\n /* me too *\\/');\n * console.log(str);\n * // => 'const foo = \"bar\";// this is a comment'\n * ```\n * @name  .block\n * @param  {String} `input` string from which to strip comments\n * @param  {Object} `options` pass `opts.keepProtected: true` to keep ignored comments (e.g. `/*!`)\n * @return {String} modified string\n * @api public\n */\n\nstrip.block = (input, options) => {\n  const opts = { ...options, block: true };\n  return compile(parse(input, opts), opts);\n};\n\n/**\n * Strip only line comments.\n *\n * ```js\n * const str = strip.line('const foo = \"bar\";// this is a comment\\n /* me too *\\/');\n * console.log(str);\n * // => 'const foo = \"bar\";\\n/* me too *\\/'\n * ```\n * @name  .line\n * @param  {String} `input` string from which to strip comments\n * @param  {Object} `options` pass `opts.keepProtected: true` to keep ignored comments (e.g. `//!`)\n * @return {String} modified string\n * @api public\n */\n\nstrip.line = (input, options) => {\n  const opts = { ...options, line: true };\n  return compile(parse(input, opts), opts);\n};\n\n/**\n * Strip the first comment from the given `input`. Or, if `opts.keepProtected` is true,\n * the first non-protected comment will be stripped.\n *\n * ```js\n * const output = strip.first(input, { keepProtected: true });\n * console.log(output);\n * // => '//! first comment\\nfoo; '\n * ```\n * @name .first\n * @param {String} `input`\n * @param {Object} `options` pass `opts.keepProtected: true` to keep comments with `!`\n * @return {String}\n * @api public\n */\n\nstrip.first = (input, options) => {\n  const opts = { ...options, block: true, line: true, first: true };\n  return compile(parse(input, opts), opts);\n};\n\n/**\n * Parses a string and returns a basic CST (Concrete Syntax Tree).\n *\n * ```js\n * const strip = require('..');\n * const str = strip.block('const foo = \"bar\";// this is a comment\\n /* me too *\\/');\n * console.log(str);\n * // => 'const foo = \"bar\";// this is a comment'\n * ```\n * @name  .block\n * @param  {String} `input` string from which to strip comments\n * @param  {Object} `options` pass `opts.keepProtected: true` to keep ignored comments (e.g. `/*!`)\n * @return {String} modified string\n * @api public\n */\n\nstrip.parse = parse;\n","module.exports={\"for every dot return 0 or 1 \\nto change the visibility\":\"Math.random() < 0.1\",\"use a float between 0 and 1\\n to define the size\":\"Math.random()\",\"parameter `t` is \\nthe time in seconds\":\"Math.sin(t)\",\"param `i` is the index \\nof the dot (0..255)\":\"i / 256\",\"`x` is the column index\\n from 0 to 15\":\"x / 16\",\"`y` is the row\\n also from 0 to 15\":\"y / 16\",\"positive numbers are white,\\nnegatives are red\":\"y - 7.5\",\"use the time\\nto animate values\":\"y - t\",\"multiply the time\\nto change the speed\":\"y - t*4\",\"create patterns using \\ndifferent color\":\"[1, 0, -1][i%3]\",\"skip `Math.` to use methods \\nand props like `sin` or `PI`\":\"sin(t-sqrt((x-7.5)**2+(y-6)**2))\",\"more examples ...\":\"sin(y/8 + t)\",\"simple triangle\":\"y - x\",\"quarter triangle\":\"(y > x) && (14-x < y)\",pattern:\"i%4 - y%4\",grid:\"x%4 && y%4\",square:\"x>3 & y>3 & x<12 & y<12\",\"animated square\":\"-(x>t & y>t & x<15-t & y<15-t)\",\"mondrian squares\":\"(y-6) * (x-6)\",\"moving cross\":\"(y-4*t|0) * (x-2-t|0)\",sierpinski:\"4 * t & i & x & y\",\"binary clock\":\"(t*10) & (1<<x) && y==8\",\"random noise\":\"random() * 2 - 1\",\"static smooth noise\":\"sin(i ** 2)\",\"animated smooth noise\":\"cos(t + i + x * y)\",waves:\"sin(x/2) - sin(x-t) - y+6\",\"bloop bloop bloop\\nby @v21\":\"(x-8)*(y-8) - sin(t)*64\",\"fireworks\\nby @p_malin and @aemkei\":\"-.4/(hypot(x-t%10,y-t%8)-t%2*9)\",\"ripples\\nby @thespite\":\"Math.sin(t-Math.sqrt(x*x+y*y))\",\"scrolling TIXY font\\nby @atesgoral\":\"[5463,2194,2386][y+t*9&7]&1<<x-1\",\"3d checker board\\nby @p_malin\":\"(((x-8)/y+t*5)&1^1/y*8&1)*y/5\",\"sticky blood\\nby @joeytwiddle\":\"y-t*3+9+3*cos(x*3-t)-5*sin(x*7)\",\"3d starfield\\nby @p_malin\":\"d=y*y%5.9+1,!((x+t*50/d)&15)/d\",\"dialogue with an alien\\nby @chiptune\":\"1/32*tan(t/64*x*tan(i-x))\",\"space invader\\nby @keithclarkcouk + @zozuar\":\"'p}¶¼<¼¶}p'.charCodeAt(x)&2**y\",\"hungry pac man\\nby @p_malin and @aemkei\":\"hypot(x-=t%4*5,y-=8)<6&&x<y|y<-x\",\"spectrum analyser\\nby @joeytwiddle\":\"x&y<9&y>4+sin(8*t+x*x)+x/4\",diagonals:\"y == x || -(15-x == y)\",frame:\"x==0 | x==15 | y==0 | y==15\",drop:\"8*t%13 - hypot(x-7.5, y-7.5)\",rotation:\"sin(2*atan((y-7.5)/(x-7.5))+5*t)\",wipe:\"(x-y) - sin(t) * 16\",\"soft wipe\":\"(x-y)/24 - sin(t)\",disco:\"sin(t*5) * tan(t*7)\",\"input is limited \\nto 32 characters!\":\"(x-5)**2 + (y-5)**2 - 99*sin(t)\",\"click here to \\ncreate your own\":\"'HAVE FUN!'\"};","const strip = require('strip-comments');\n\nconst count = 16;\nconst size = 16;\nconst spacing = 1;\nconst width = count * (size + spacing) - spacing;\n\nimport examples from './examples.json';\n\nconst input = document.getElementById('input');\nconst editor = document.getElementById('editor');\nconst comment = document.getElementById('comment');\nconst output = document.getElementById('output');\nconst context = output.getContext('2d');\nconst dpr = window.devicePixelRatio || 1;\n\nlet callback = function () { };\nlet startTime = null;\nlet code = '';\n\noutput.width = output.height = width * dpr;\ncontext.scale(dpr, dpr);\noutput.style.width = output.style.height = `${width}px`;\n\nfunction fetchGist(gist) {\n  function extractCode(file) {\n    if (file.truncated === true) {\n      throw 'Javascript file larger them 1MB'\n    } else {\n      return strip(file.content)\n        .split(/[\\r\\n]+/)\n        .map(line => line.trim())\n        .join('')\n    }\n  }\n\n  function extractFile(files) {\n    const keys = Object.keys(files).filter(key => key.endsWith('.js'))\n    let key\n\n    if (files['tixy.js']) {\n      key = 'tixy.js'\n    } else if (keys.length === 0) {\n      throw 'No javascript file found'\n    } else if (keys.length > 1) {\n      throw 'Found multiple javascript file but no tixy.js'\n    } else {\n      key = keys[0];\n    }\n\n    return files[key]\n  }\n\n  fetch(`https://api.github.com/gists/${gist}`)\n    .then(response => response.ok ? response.json() : Promise.reject(response))\n    .then(response => extractFile(response.files))\n    .then(file => extractCode(file))\n    .then(code => {\n      input.value = code;\n      submitCode(code);\n      updateCallback()\n    })\n    .catch(error => console.log(error) && updateComments(['Could not loading Gist', error]))\n}\n\nfunction readURL() {\n  const url = new URL(document.location);\n\n  if (url.searchParams.has('code')) {\n    input.value = url.searchParams.get('code');\n  } else if (url.searchParams.has('gist')) {\n    fetchGist(url.searchParams.get('gist'));\n  }\n}\n\nfunction submitCode(code) {\n  const url = new URL(document.location);\n  url.searchParams.set('code', code);\n  history.replaceState(null, code, url);\n}\n\nreadURL();\n\nfunction checkLength() {\n  if (code.length > 32) {\n    editor.classList.add('over-limit');\n  } else {\n    editor.classList.remove('over-limit');\n  }\n}\n\nfunction updateCallback() {\n  code = input.value;\n  startTime = null;\n\n  checkLength();\n\n  try {\n    callback = new Function('t', 'i', 'x', 'y', `\n      try {\n        with (Math) {\n          return ${code};\n        }\n      } catch (error) {\n        return error;\n      }\n    `);\n  } catch (error) {\n    callback = null;\n  }\n}\n\ninput.addEventListener('input', updateCallback);\nupdateCallback();\n\ninput.addEventListener('focus', function () {\n  editor.classList.add('focus');\n  updateComments([\n    'hit \"enter\" to save in URL',\n    'or get <a href=\"https://twitter.com/aemkei/status/1323399877611708416\">more info here</a>'\n  ]);\n});\n\ninput.addEventListener('blur', function () {\n  updateCommentsForCode();\n  editor.classList.remove('focus');\n});\n\neditor.addEventListener('submit', (event) => {\n  event.preventDefault();\n  submitCode(code)\n});\n\nfunction render() {\n  let time = 0;\n\n  if (startTime) {\n    time = (new Date() - startTime) / 1000;\n  } else {\n    startTime = new Date();\n  }\n\n  if ( ! callback) {\n    window.requestAnimationFrame(render);\n    return;\n  }\n\n  output.width = output.height = width * dpr;\n  context.scale(dpr, dpr);\n  let index = 0;\n  for (let y = 0; y < count; y++) {\n    for (let x = 0; x < count; x++) {\n      const value = Number(callback(time, index, x, y));\n      const offset = size / 2;\n      let color = '#FFF';\n      let radius = (value * size) / 2;\n\n      if (radius < 0) {\n        radius = -radius;\n        color = '#F24';\n      }\n\n      if (radius > size / 2) {\n        radius = size / 2;\n      }\n\n      context.beginPath();\n      context.fillStyle = color;\n      context.arc(\n        x * (size + spacing) + offset,\n        y * (size + spacing) + offset,\n        radius,\n        0,\n        2 * Math.PI\n      );\n      context.fill();\n      index++;\n    }\n  }\n\n  window.requestAnimationFrame(render);\n}\n\nrender();\n\nfunction updateComments(comments) {\n  const lines = comment.querySelectorAll('label');\n\n  if (comments.length === 1) {\n    lines[0].innerHTML = '&nbsp;';\n    lines[1].innerHTML = `// ${comments[0]}`;\n  } else {\n    lines[0].innerHTML = `// ${comments[0]}`;\n    lines[1].innerHTML = `// ${comments[1]}`;\n  }\n}\n\nfunction updateCommentsForCode() {\n  const code = input.value;\n\n  const snippets = Object.values(examples);\n  const comments = Object.keys(examples);\n  const index = snippets.indexOf(code);\n  const newComment = comments[index];\n\n  if ( ! newComment) {\n    return;\n  }\n\n  const newComments = newComment.split('\\n');\n\n  updateComments(newComments);\n}\n\nfunction nextExample() {\n  const snippets = Object.values(examples);\n\n  let index = snippets.indexOf(code);\n\n  if (snippets[index + 1]) {\n    index = index + 1;\n  } else {\n    return;\n  }\n\n  const newCode = snippets[index];\n  input.value = newCode;\n\n  updateCommentsForCode();\n\n  // history.replaceState({\n  //   code: newCode,\n  //   comment: newComment\n  // }, code, `?code=${encodeURIComponent(newCode)}`);\n\n  updateCallback();\n}\n\noutput.addEventListener('click', nextExample);\n\nwindow.onpopstate = function (event) {\n  readURL();\n  updateCallback();\n};\n\nupdateCommentsForCode();\n"]}